{
  "countMostSevereTestStepResultStatus" : {
    "UNKNOWN" : 0,
    "PASSED" : 10,
    "SKIPPED" : 0,
    "PENDING" : 0,
    "UNDEFINED" : 0,
    "AMBIGUOUS" : 0,
    "FAILED" : 0
  },
  "countTestCasesStarted" : 10,
  "findAllPickles" : 10,
  "findAllPickleSteps" : 10,
  "findAllTestCaseStarted" : 10,
  "findAllTestSteps" : 20,
  "findAllTestCaseStartedGroupedByFeature" : [
    [
      "Attachments",
      [
        "81",
        "82",
        "83",
        "84",
        "85",
        "86",
        "87",
        "88",
        "89",
        "90"
      ]
    ]
  ],
  "findAttachmentsBy" : [
    [
      "52",
      "81",
      "application/octet-stream",
      "IDENTITY"
    ],
    [
      "55",
      "82",
      "text/x.cucumber.log+plain",
      "IDENTITY"
    ],
    [
      "58",
      "83",
      "text/x.cucumber.log+plain",
      "IDENTITY"
    ],
    [
      "61",
      "84",
      "application/json",
      "IDENTITY"
    ],
    [
      "64",
      "85",
      "text/plain",
      "BASE64"
    ],
    [
      "67",
      "86",
      "image/jpeg",
      "BASE64"
    ],
    [
      "70",
      "87",
      "image/png",
      "BASE64"
    ],
    [
      "73",
      "88",
      "image/jpeg",
      "BASE64"
    ],
    [
      "76",
      "89",
      "image/png",
      "BASE64"
    ],
    [
      "79",
      "90",
      "application/pdf",
      "BASE64"
    ]
  ],
  "findFeatureBy" : [
    "Attachments",
    "Attachments",
    "Attachments",
    "Attachments",
    "Attachments",
    "Attachments",
    "Attachments",
    "Attachments",
    "Attachments",
    "Attachments"
  ],
  "findHookBy" : [
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0"
  ],
  "findMeta" : "fake-cucumber",
  "findMostSevereTestStepResultBy" : [
    "PASSED",
    "PASSED",
    "PASSED",
    "PASSED",
    "PASSED",
    "PASSED",
    "PASSED",
    "PASSED",
    "PASSED",
    "PASSED"
  ],
  "findNameOf" : {
    "long" : [
      "Attachments - Strings can be attached with a media type",
      "Attachments - Log text",
      "Attachments - Log ANSI coloured text",
      "Attachments - Log JSON",
      "Attachments - Byte arrays are base64-encoded regardless of media type",
      "Attachments - Attaching JPEG images",
      "Attachments - Attaching PNG images",
      "Attachments - Attaching images in an examples table - #1.1",
      "Attachments - Attaching images in an examples table - #1.2",
      "Attachments - Attaching PDFs with a different filename"
    ],
    "excludeFeatureName" : [
      "Strings can be attached with a media type",
      "Log text",
      "Log ANSI coloured text",
      "Log JSON",
      "Byte arrays are base64-encoded regardless of media type",
      "Attaching JPEG images",
      "Attaching PNG images",
      "Attaching images in an examples table - #1.1",
      "Attaching images in an examples table - #1.2",
      "Attaching PDFs with a different filename"
    ],
    "longPickleName" : [
      "Attachments - Strings can be attached with a media type",
      "Attachments - Log text",
      "Attachments - Log ANSI coloured text",
      "Attachments - Log JSON",
      "Attachments - Byte arrays are base64-encoded regardless of media type",
      "Attachments - Attaching JPEG images",
      "Attachments - Attaching PNG images",
      "Attachments - Attaching images in an examples table - Attaching images in an examples table",
      "Attachments - Attaching images in an examples table - Attaching images in an examples table",
      "Attachments - Attaching PDFs with a different filename"
    ],
    "short" : [
      "Strings can be attached with a media type",
      "Log text",
      "Log ANSI coloured text",
      "Log JSON",
      "Byte arrays are base64-encoded regardless of media type",
      "Attaching JPEG images",
      "Attaching PNG images",
      "#1.1",
      "#1.2",
      "Attaching PDFs with a different filename"
    ],
    "shortPickleName" : [
      "Strings can be attached with a media type",
      "Log text",
      "Log ANSI coloured text",
      "Log JSON",
      "Byte arrays are base64-encoded regardless of media type",
      "Attaching JPEG images",
      "Attaching PNG images",
      "Attaching images in an examples table",
      "Attaching images in an examples table",
      "Attaching PDFs with a different filename"
    ]
  },
  "findPickleBy" : [
    "Strings can be attached with a media type",
    "Log text",
    "Log ANSI coloured text",
    "Log JSON",
    "Byte arrays are base64-encoded regardless of media type",
    "Attaching JPEG images",
    "Attaching PNG images",
    "Attaching images in an examples table",
    "Attaching images in an examples table",
    "Attaching PDFs with a different filename"
  ],
  "findPickleStepBy" : [
    "the string \"hello\" is attached as \"application/octet-stream\"",
    "the string \"hello\" is logged",
    "text with ANSI escapes is logged",
    "the following string is attached as \"application/json\":",
    "an array with 10 bytes is attached as \"text/plain\"",
    "a JPEG image is attached",
    "a PNG image is attached",
    "a JPEG image is attached",
    "a PNG image is attached",
    "a PDF document is attached and renamed"
  ],
  "findStepBy" : [
    "the string \"hello\" is attached as \"application/octet-stream\"",
    "the string \"hello\" is logged",
    "text with ANSI escapes is logged",
    "the following string is attached as \"application/json\":",
    "an array with 10 bytes is attached as \"text/plain\"",
    "a JPEG image is attached",
    "a PNG image is attached",
    "a <type> image is attached",
    "a <type> image is attached",
    "a PDF document is attached and renamed"
  ],
  "findTestCaseBy" : [
    "53",
    "56",
    "59",
    "62",
    "65",
    "68",
    "71",
    "74",
    "77",
    "80"
  ],
  "findTestCaseDurationBy" : [
    {
      "seconds" : 0,
      "nanos" : 5000000
    },
    {
      "seconds" : 0,
      "nanos" : 5000000
    },
    {
      "seconds" : 0,
      "nanos" : 5000000
    },
    {
      "seconds" : 0,
      "nanos" : 5000000
    },
    {
      "seconds" : 0,
      "nanos" : 5000000
    },
    {
      "seconds" : 0,
      "nanos" : 5000000
    },
    {
      "seconds" : 0,
      "nanos" : 5000000
    },
    {
      "seconds" : 0,
      "nanos" : 5000000
    },
    {
      "seconds" : 0,
      "nanos" : 5000000
    },
    {
      "seconds" : 0,
      "nanos" : 5000000
    }
  ],
  "findTestCaseFinishedBy" : [
    "81",
    "82",
    "83",
    "84",
    "85",
    "86",
    "87",
    "88",
    "89",
    "90"
  ],
  "findTestRunDuration" : {
    "seconds" : 0,
    "nanos" : 61000000
  },
  "findTestRunFinished" : {
    "success" : true,
    "timestamp" : {
      "seconds" : 0,
      "nanos" : 61000000
    }
  },
  "findTestRunStarted" : {
    "timestamp" : {
      "seconds" : 0,
      "nanos" : 0
    }
  },
  "findTestStepBy" : [
    "51",
    "52",
    "54",
    "55",
    "57",
    "58",
    "60",
    "61",
    "63",
    "64",
    "66",
    "67",
    "69",
    "70",
    "72",
    "73",
    "75",
    "76",
    "78",
    "79"
  ],
  "findTestStepsFinishedBy" : [
    [
      "51",
      "52"
    ],
    [
      "54",
      "55"
    ],
    [
      "57",
      "58"
    ],
    [
      "60",
      "61"
    ],
    [
      "63",
      "64"
    ],
    [
      "66",
      "67"
    ],
    [
      "69",
      "70"
    ],
    [
      "72",
      "73"
    ],
    [
      "75",
      "76"
    ],
    [
      "78",
      "79"
    ]
  ],
  "findTestStepFinishedAndTestStepBy" : [
    [
      "51",
      "51"
    ],
    [
      "52",
      "52"
    ],
    [
      "54",
      "54"
    ],
    [
      "55",
      "55"
    ],
    [
      "57",
      "57"
    ],
    [
      "58",
      "58"
    ],
    [
      "60",
      "60"
    ],
    [
      "61",
      "61"
    ],
    [
      "63",
      "63"
    ],
    [
      "64",
      "64"
    ],
    [
      "66",
      "66"
    ],
    [
      "67",
      "67"
    ],
    [
      "69",
      "69"
    ],
    [
      "70",
      "70"
    ],
    [
      "72",
      "72"
    ],
    [
      "73",
      "73"
    ],
    [
      "75",
      "75"
    ],
    [
      "76",
      "76"
    ],
    [
      "78",
      "78"
    ],
    [
      "79",
      "79"
    ]
  ]
}